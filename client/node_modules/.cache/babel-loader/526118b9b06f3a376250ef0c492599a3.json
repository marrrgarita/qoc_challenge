{"ast":null,"code":"import * as types from './actionTypes';\nexport function receiveApps(json) {\n  return {\n    type: types.RECEIVE_APPS,\n    apps: json\n  };\n}\nexport function fetchApps() {\n  return function (dispatch) {\n    fetch('https://jsonplaceholder.typicode.com/users').then(function (response) {\n      return response.json().then(function (data) {\n        return {\n          data: data,\n          status: response.status\n        };\n      });\n    }).then(function (response) {\n      if (response.status === 200) {\n        dispatch(receiveApps(response.data));\n      } else {\n        var flash = {\n          type: 'error',\n          title: 'Error getting task list',\n          content: 'There was an error getting the task list. Please try again.'\n        };\n        dispatch({\n          type: \"DISPLAY_FLASH\",\n          data: flash\n        });\n      }\n    });\n  };\n}\nexport function fetchApplications() {\n  return function (dispatch) {\n    return fetch('https://jsonplaceholder.typicode.com/users', {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(function (response) {\n      var json = response.json();\n\n      if (response.status === 200) {\n        dispatch(receiveApps(response.data));\n      }\n    });\n  };\n} // export const fetchData = () => {\n//     return (dispatch) => {\n//         dispatch(loadingData())\n//         return fetch(BLL.helpers.globalVars.API_BASE_URL + '/asset/GetReportData', {\n//             method: \"GET\",\n//             credentials: 'include',\n//             headers: {\n//                 \"Content-Type\": \"application/json\"\n//             }\n//         }).then(response => BLL.helpers.miscHelpers.responseValidator(response)).then(response => {\n//             if (response.success) {\n//                 dispatch(initReports(response.payload))\n//             } else {\n//                 dispatch(initReports([]))\n//                 toastr.error('Error loading report data', response.messages[0]);\n//             }\n//         })\n//     }\n// }","map":{"version":3,"sources":["/Users/mbartholomew/Documents/qoc_challenge/client/src/actions/appActions.js"],"names":["types","receiveApps","json","type","RECEIVE_APPS","apps","fetchApps","dispatch","fetch","then","response","data","status","flash","title","content","fetchApplications","method","headers"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,eAAvB;AAEA,OAAO,SAASC,WAAT,CAAqBC,IAArB,EAA0B;AAC/B,SAAO;AAACC,IAAAA,IAAI,EAAEH,KAAK,CAACI,YAAb;AAA2BC,IAAAA,IAAI,EAAEH;AAAjC,GAAP;AACD;AAED,OAAO,SAASI,SAAT,GAAqB;AACxB,SAAO,UAACC,QAAD,EAAc;AACjBC,IAAAA,KAAK,CAAC,4CAAD,CAAL,CACKC,IADL,CACU,UAAAC,QAAQ;AAAA,aACVA,QAAQ,CAACR,IAAT,GAAgBO,IAAhB,CAAqB,UAAAE,IAAI;AAAA,eAAK;AAC1BA,UAAAA,IAAI,EAAEA,IADoB;AAE1BC,UAAAA,MAAM,EAAEF,QAAQ,CAACE;AAFS,SAAL;AAAA,OAAzB,CADU;AAAA,KADlB,EAOKH,IAPL,CAOU,UAAAC,QAAQ,EAAI;AACd,UAAGA,QAAQ,CAACE,MAAT,KAAoB,GAAvB,EAA2B;AACvBL,QAAAA,QAAQ,CAACN,WAAW,CAACS,QAAQ,CAACC,IAAV,CAAZ,CAAR;AACH,OAFD,MAEK;AACD,YAAIE,KAAK,GAAG;AACRV,UAAAA,IAAI,EAAE,OADE;AAERW,UAAAA,KAAK,EAAE,yBAFC;AAGRC,UAAAA,OAAO,EAAE;AAHD,SAAZ;AAKAR,QAAAA,QAAQ,CAAC;AAACJ,UAAAA,IAAI,EAAE,eAAP;AAAwBQ,UAAAA,IAAI,EAAEE;AAA9B,SAAD,CAAR;AACH;AACJ,KAlBL;AAmBH,GApBD;AAqBH;AAED,OAAO,SAASG,iBAAT,GAA6B;AAClC,SAAO,UAACT,QAAD,EAAc;AACnB,WAAOC,KAAK,CAAC,4CAAD,EAA8C;AACxDS,MAAAA,MAAM,EAAE,KADgD;AAExDC,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX;AAF+C,KAA9C,CAAL,CAKJT,IALI,CAKC,UAAAC,QAAQ,EAAI;AAClB,UAAIR,IAAI,GAAGQ,QAAQ,CAACR,IAAT,EAAX;;AACA,UAAIQ,QAAQ,CAACE,MAAT,KAAoB,GAAxB,EAA4B;AAC1BL,QAAAA,QAAQ,CAACN,WAAW,CAACS,QAAQ,CAACC,IAAV,CAAZ,CAAR;AACD;AACF,KAVM,CAAP;AAWD,GAZD;AAaD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import * as types from './actionTypes';\n\nexport function receiveApps(json){\n  return {type: types.RECEIVE_APPS, apps: json};\n}\n\nexport function fetchApps() {\n    return (dispatch) => {\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response =>\n                response.json().then(data => ({\n                    data: data,\n                    status: response.status\n                }))\n            )\n            .then(response => {\n                if(response.status === 200){\n                    dispatch(receiveApps(response.data))\n                }else{\n                    var flash = {\n                        type: 'error',\n                        title: 'Error getting task list',\n                        content: 'There was an error getting the task list. Please try again.'\n                    }\n                    dispatch({type: \"DISPLAY_FLASH\", data: flash})\n                }\n            });\n    };\n}\n\nexport function fetchApplications() {\n  return (dispatch) => {\n    return fetch('https://jsonplaceholder.typicode.com/users',{\n      method: \"GET\",\n      headers: {\n          \"Content-Type\": \"application/json\"\n      }\n    }).then(response => {\n      let json = response.json();\n      if (response.status === 200){\n        dispatch(receiveApps(response.data))\n      }\n    })\n  }\n}\n\n// export const fetchData = () => {\n//     return (dispatch) => {\n//         dispatch(loadingData())\n//         return fetch(BLL.helpers.globalVars.API_BASE_URL + '/asset/GetReportData', {\n//             method: \"GET\",\n//             credentials: 'include',\n//             headers: {\n//                 \"Content-Type\": \"application/json\"\n//             }\n//         }).then(response => BLL.helpers.miscHelpers.responseValidator(response)).then(response => {\n//             if (response.success) {\n//                 dispatch(initReports(response.payload))\n//             } else {\n//                 dispatch(initReports([]))\n//                 toastr.error('Error loading report data', response.messages[0]);\n//             }\n//         })\n//     }\n// }\n"]},"metadata":{},"sourceType":"module"}