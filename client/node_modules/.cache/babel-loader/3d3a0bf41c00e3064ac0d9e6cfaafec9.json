{"ast":null,"code":"import * as types from './actionTypes';\n\nfunction url() {\n  return 'www.url.com';\n}\n\nexport function receiveApps(json) {\n  return {\n    type: types.RECEIVE_APPS,\n    stuff: json.stuff\n  };\n}\nexport function fetchApps() {\n  return function (dispatch) {\n    return fetch(url(), {\n      method: 'GET',\n      mode: 'cors',\n      credentials: 'include',\n      headers: {\n        'x-api-key': apiKey,\n        'Accept': 'application/json'\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (json) {\n      return dispatch(receiveStuff(json));\n    });\n  };\n}","map":{"version":3,"sources":["/Users/mbartholomew/Documents/qoc_challenge/client/src/actions/appActions.js"],"names":["types","url","receiveApps","json","type","RECEIVE_APPS","stuff","fetchApps","dispatch","fetch","method","mode","credentials","headers","apiKey","then","response","receiveStuff"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,eAAvB;;AAEA,SAASC,GAAT,GAAc;AACZ,SAAO,aAAP;AACD;;AAED,OAAO,SAASC,WAAT,CAAqBC,IAArB,EAA0B;AAC/B,SAAO;AAACC,IAAAA,IAAI,EAAEJ,KAAK,CAACK,YAAb;AAA2BC,IAAAA,KAAK,EAAEH,IAAI,CAACG;AAAvC,GAAP;AACD;AAED,OAAO,SAASC,SAAT,GAAoB;AACzB,SAAO,UAAAC,QAAQ,EAAI;AACjB,WAAOC,KAAK,CAACR,GAAG,EAAJ,EAAQ;AACjBS,MAAAA,MAAM,EAAE,KADS;AAEjBC,MAAAA,IAAI,EAAE,MAFW;AAGjBC,MAAAA,WAAW,EAAE,SAHI;AAIjBC,MAAAA,OAAO,EAAE;AACP,qBAAaC,MADN;AAEP,kBAAU;AAFH;AAJQ,KAAR,CAAL,CASNC,IATM,CASD,UAAAC,QAAQ;AAAA,aAAIA,QAAQ,CAACb,IAAT,EAAJ;AAAA,KATP,EAUNY,IAVM,CAUD,UAAAZ,IAAI;AAAA,aAAIK,QAAQ,CAACS,YAAY,CAACd,IAAD,CAAb,CAAZ;AAAA,KAVH,CAAP;AAWD,GAZD;AAaD","sourcesContent":["import * as types from './actionTypes';\n\nfunction url(){\n  return 'www.url.com';\n}\n\nexport function receiveApps(json){\n  return {type: types.RECEIVE_APPS, stuff: json.stuff};\n}\n\nexport function fetchApps(){\n  return dispatch => {\n    return fetch(url(), {\n       method: 'GET',\n       mode: 'cors',\n       credentials: 'include',\n       headers: {\n         'x-api-key': apiKey,\n         'Accept': 'application/json'\n     }\n    })\n    .then(response => response.json())\n    .then(json => dispatch(receiveStuff(json)));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}